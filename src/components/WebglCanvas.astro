---
interface Props {
	delay: number;
}
---

<script>
	import * as THREE from 'three';
	import { createBuffer, initProgram } from '../utils/webgl/webglUtils';
	import { createRadialGradientTexture } from '../utils/webgl/createRadialGradient';
	import { initializeBloomEffect } from '../utils/webgl/bloomPass';
	import { scroller } from '../utils/scroller';
	import { query, timeout } from '../utils/generalUtils';

	import gsap from 'gsap';

	const canvas = query.one('#canvas') as HTMLCanvasElement;
	const delayAttr = canvas.getAttribute('data-delay');
	const delay = delayAttr ? parseFloat(delayAttr) : 0;

	const NUM_BOIDS = 10000;
	let currentBoids = NUM_BOIDS;

	async function runBoids() {
		const gl = canvas.getContext('webgl2', { alpha: true })!;
		if (!gl) return alert('WebGL2 not supported');

		const varyings = gl.getParameter(gl.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS);
		if (varyings < 4) return console.error('Need at least 4 transform feedback varyings');

		const boidsProgram = await initProgram(gl, {
			vertexPath: '/shaders/boid.vert',
			fragmentPath: '/shaders/boid.frag',
			transformFeedbackVaryings: ['v_position', 'v_velocity', 'v_deviationVel']
		});

		gl.useProgram(boidsProgram);

		const updateGridProgram = await initProgram(gl, {
			vertexPath: '/shaders/updateGrid.vert',
			fragmentPath: '/shaders/updateGrid.frag'
		});

		const uLoc = (name: string) => gl.getUniformLocation(boidsProgram, name)!;

		const hexToRgb = (hex: string) =>
			[1, 3, 5].map((i) => parseInt(hex.slice(i, i + 2), 16) / 255) as [number, number, number];

		gl.uniform1f(uLoc('u_pointSize'), 2.4);
		gl.uniform1f(uLoc('u_maxSpeed'), 2.0);
		gl.uniform1f(uLoc('u_maxForce'), 0.2);
		// gl.uniform3f(uLoc('u_color1'), ...hexToRgb('#49a25f'));
		// gl.uniform3f(uLoc('u_color2'), ...hexToRgb('#34094b'));

		//trippy iowaska colors
		// gl.uniform3f(uLoc('u_color1'), ...hexToRgb('#c02425'));
		// gl.uniform3f(uLoc('u_color2'), ...hexToRgb('#f0cb35'));

		//another trippy one
		// gl.uniform3f(uLoc('u_color1'), ...hexToRgb('#ff6a00'));
		// gl.uniform3f(uLoc('u_color2'), ...hexToRgb('#ee0979'));

		//white to pink to purple
		// gl.uniform3f(uLoc('u_color1'), ...hexToRgb('#fdeff9'));
		// gl.uniform3f(uLoc('u_color2'), ...hexToRgb('#03001e'));

		//gold to blue greeny
		gl.uniform3f(uLoc('u_color1'), ...hexToRgb('#315492'));
		gl.uniform3f(uLoc('u_color2'), ...hexToRgb('#290529'));

		// gold red
		// gl.uniform3f(uLoc('u_color1'), ...hexToRgb('#b47a2d'));
		// gl.uniform3f(uLoc('u_color2'), ...hexToRgb('#5b0b0b'));

		// gl.uniform3f(uLoc('u_color1'), ...hexToRgb('#a4c3c5'));
		// gl.uniform3f(uLoc('u_color2'), ...hexToRgb('#022c19'));

		const cameraDist = 1000;
		const near = 1;
		const far = cameraDist * 2;

		const camera = new THREE.PerspectiveCamera(60, canvas.width / canvas.height, near, far);

		gl.uniform1f(uLoc('u_far'), far);
		gl.uniform1f(uLoc('u_near'), near);

		const mouse = new THREE.Vector2(canvas.height / 2, canvas.width / 2);

		const updateCamera = () => {
			requestAnimationFrame(() => {
				camera.aspect = canvas.width / canvas.height;
				let progress = scroller.top;
				if (progress > 1000) progress = 0;
				progress *= 1.5;

				let dist = cameraDist - progress;
				// if (progress > 1500) progress -= document.body.scrollHeight + window.innerHeight - 1500;
				// if (dist < 0) dist = cameraDist;

				const mouseFactor = mouse.clone().divideScalar(5) ?? { x: 0, y: 0 };
				const camAngle = Math.asin(mouseFactor.length() / dist);
				const { x, y } = mouseFactor.normalize().multiplyScalar(-dist * Math.sin(camAngle));
				camera.position.set(x, y, -dist * Math.cos(camAngle));
				camera.lookAt(0, 0, progress);

				camera.updateMatrixWorld();
				camera.updateProjectionMatrix();

				gl.useProgram(boidsProgram);
				gl.uniformMatrix4fv(uLoc('u_projectionMatrix'), false, camera.projectionMatrix.toArray());
				gl.uniformMatrix4fv(uLoc('u_viewMatrix'), false, camera.matrixWorld.toArray());
				gl.uniformMatrix4fv(uLoc('u_inverseProjectionMatrix'), false, camera.projectionMatrixInverse.toArray());
				gl.uniformMatrix4fv(uLoc('u_inverseViewMatrix'), false, camera.matrixWorldInverse.toArray());
			});
		};

		const resize = () => {
			if (!canvas) return;
			canvas.width = canvas.clientWidth;
			canvas.height = canvas.clientHeight;

			gl.useProgram(boidsProgram);
			gl.uniform3f(uLoc('u_canvasSize'), canvas.width, canvas.height, 1000);

			updateCamera();
		};

		resize();
		window.addEventListener('resize', () => resize());
		scroller.subscribe(() => updateCamera());

		function moveTarget({ x, y }: THREE.Vector2Like) {
			const depth = -far / 2;
			const a = (far + near) / (far - near);
			const b = (2 * far * near) / (far - near);
			const z = (a * depth + b) / depth;

			const target = new THREE.Vector3(x, y, z).unproject(camera);
			gl.useProgram(boidsProgram);
			gl.uniform3f(uLoc('u_target'), target.x, target.y, target.z);
		}

		const randomVec3 = () => {
			const vec = new THREE.Vector3().random().multiplyScalar(2).subScalar(1);
			if (vec.length() > 1) return randomVec3();
			return vec;
		};
		const randomVec2 = () => {
			const vec = new THREE.Vector2().random().multiplyScalar(2).subScalar(1);
			if (vec.length() > 1) return randomVec2();
			return vec;
		};

		const target = randomVec2().multiplyScalar(0.35);
		const keepMovingTheTarget = () => {
			target.rotateAround({ x: 0, y: 0 }, (0.5 + Math.random()) * Math.PI);
			moveTarget(target);
			timeout((Math.random() + 1) * 2000).then(keepMovingTheTarget);
		};

		moveTarget(target);
		timeout(1000 + delay).then(() => keepMovingTheTarget());

		const viewDist = 30;
		const cellSize = viewDist / 1.2;
		const boidsPerCell = 20;
		const canvasSize = new THREE.Vector3(canvas.width, canvas.height, 1000);
		const gridSize = canvasSize.clone().divideScalar(cellSize);
		const gridTextureSize = new THREE.Vector2(gridSize.x * gridSize.y, gridSize.z * boidsPerCell);

		gl.uniform1f(uLoc('u_viewDist'), viewDist);
		gl.uniform3f(uLoc('u_gridSize'), gridSize.x, gridSize.y, gridSize.z);
		gl.uniform2f(uLoc('u_gridTextureSize'), gridTextureSize.x, gridTextureSize.y);
		gl.uniform1f(uLoc('u_boidsPerCell'), boidsPerCell);

		gl.useProgram(updateGridProgram);

		const canvasSizeloc = gl.getUniformLocation(updateGridProgram, 'u_canvasSize');
		const gridSizeLoc = gl.getUniformLocation(updateGridProgram, 'u_gridSize');
		const gridTextureSizeLoc = gl.getUniformLocation(updateGridProgram, 'u_gridTextureSize');
		const boidsPerCellLoc = gl.getUniformLocation(updateGridProgram, 'u_boidsPerCell');

		gl.uniform3f(canvasSizeloc, canvasSize.x, canvasSize.y, canvasSize.z);
		gl.uniform3f(gridSizeLoc, gridSize.x, gridSize.y, gridSize.z);
		gl.uniform2f(gridTextureSizeLoc, gridTextureSize.x, gridTextureSize.y);
		gl.uniform1f(boidsPerCellLoc, boidsPerCell);

		const ext = gl.getExtension('EXT_color_buffer_float');
		if (!ext) console.error('FLOAT textures are not supported!');

		function createGridTexture() {
			const [width, height] = gridTextureSize.toArray();
			const texture = gl.createTexture();
			gl.bindTexture(gl.TEXTURE_2D, texture);
			gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, width, height, 0, gl.RGBA, gl.FLOAT, null);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
			return texture;
		}

		const posGridTex = createGridTexture();
		const velGridTex = createGridTexture();

		const gridFrameBuffer = gl.createFramebuffer();
		gl.bindFramebuffer(gl.FRAMEBUFFER, gridFrameBuffer);

		gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, posGridTex, 0);
		gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT1, gl.TEXTURE_2D, velGridTex, 0);

		// Set the list of draw buffers
		gl.drawBuffers([gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1]);

		// Check framebuffer status
		const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
		if (status !== gl.FRAMEBUFFER_COMPLETE) console.error('Framebuffer is not complete:', status);

		gl.bindFramebuffer(gl.FRAMEBUFFER, null);

		// Initialize boid data

		// positions, velocities, deviationvelocites
		const data = Array.from({ length: 3 }).map(() => new Float32Array(NUM_BOIDS * 3));
		const [positions, velocities, deviationVels] = data;

		for (let i = 0; i < NUM_BOIDS * 3; i += 3) {
			const vec = randomVec3();
			// velocities.set([...vec], i);
			positions.set([...vec], i);
		}

		const buffers = data.map((data) => [createBuffer(gl, data), createBuffer(gl, data)]);

		// Create and bind the radial gradient texture :-)
		const gradientTexture = createRadialGradientTexture(gl, 64)!;
		const gradientTextureLoc = gl.getUniformLocation(boidsProgram, 'u_gradientTexture');

		// const mouse = new THREE.Vector2(canvas.height / 2, canvas.width / 2);
		const prevMouse = mouse.clone();

		timeout(delay).then(() => {
			window.addEventListener('mousemove', ({ clientX, clientY }) => {
				const { left, top, width, height } = canvas.getBoundingClientRect();
				const x = left + width / 2 - clientX;
				const y = top + height / 2 - clientY;
				gsap.to(mouse, { x, y, duration: 0.5, onUpdate: updateCamera });
			});
		});

		const renderWithBloom = initializeBloomEffect(gl, canvasSize);

		// let prevTime = performance.now();
		function render(time: number) {
			// const fps = 1000 / (time - prevTime);
			// prevTime = time;

			// if (fps < 30) {
			// 	currentBoids = Math.max(currentBoids - 100, 100);
			// } else if (currentBoids < NUM_BOIDS) {
			// 	currentBoids = Math.min(currentBoids + 100, NUM_BOIDS);
			// }

			gl.useProgram(updateGridProgram);
			gl.bindFramebuffer(gl.FRAMEBUFFER, gridFrameBuffer);
			gl.viewport(0, 0, gridTextureSize.x, gridTextureSize.y);

			buffers.slice(0, 2).forEach((buffer, i) => {
				gl.enableVertexAttribArray(i);
				gl.bindBuffer(gl.ARRAY_BUFFER, buffer[0]);
				gl.vertexAttribPointer(i, 3, gl.FLOAT, false, 0, 0);
			});

			gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
			gl.drawArrays(gl.POINTS, 0, currentBoids);

			gl.viewport(0, 0, canvas.width, canvas.height);

			gl.bindFramebuffer(gl.FRAMEBUFFER, null);

			renderWithBloom(() => {
				gl.useProgram(boidsProgram);

				gl.uniform2f(uLoc('u_mouse'), mouse.x, mouse.y);
				gl.uniform2f(uLoc('u_prevMouse'), prevMouse.x, prevMouse.y);
				prevMouse.set(mouse.x, mouse.y);

				buffers.forEach((buffer, i) => {
					gl.enableVertexAttribArray(i);
					gl.bindBuffer(gl.ARRAY_BUFFER, buffer[0]);
					gl.vertexAttribPointer(i, 3, gl.FLOAT, false, 0, 0);
					gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, i, buffer[1]);
				});

				// Bind the gradient texture to texture unit 0
				gl.activeTexture(gl.TEXTURE0);
				gl.bindTexture(gl.TEXTURE_2D, gradientTexture);
				gl.uniform1i(gradientTextureLoc, 0);

				gl.activeTexture(gl.TEXTURE1);
				gl.bindTexture(gl.TEXTURE_2D, posGridTex);
				gl.uniform1i(uLoc('u_posGridTex'), 1);

				gl.activeTexture(gl.TEXTURE2);
				gl.bindTexture(gl.TEXTURE_2D, velGridTex);
				gl.uniform1i(uLoc('u_velGridTex'), 2);

				gl.clear(gl.DEPTH_BUFFER_BIT);
				// gl.enable(gl.DEPTH_TEST);

				gl.enable(gl.BLEND);
				gl.blendFunc(gl.SRC_ALPHA, gl.ONE);

				gl.beginTransformFeedback(gl.POINTS);
				gl.drawArrays(gl.POINTS, 0, currentBoids);
				gl.endTransformFeedback();

				gl.activeTexture(gl.TEXTURE0);

				buffers.forEach((buffer, i) => {
					gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, i, null);
					gl.disableVertexAttribArray(i);
					buffer.reverse();
				});
			});

			// read the position buffer and console log the first position
			// const positions = new Float32Array(NUM_BOIDS * 3);
			// gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffers[1]);
			// gl.getBufferSubData(gl.ARRAY_BUFFER, 0, positions);
			// console.log(Array.from(positions.slice(0, 3)).map((x) => x.toFixed(1)));

			requestAnimationFrame(render);
		}

		timeout(delay).then(() => requestAnimationFrame(render));
	}

	const mobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
	if (!mobile) runBoids();
</script>

<canvas width="1600" height="800" data-delay={Astro.props.delay} class="w-screen h-screen" id="canvas"></canvas>
