---
import WebglCanvas from '../components/WebglCanvas.astro';

import Me from '../images/me2.png';
import Luca from '../images/luca.png';
import Suiker from '../images/archief.png';
import Podwalk from '../images/podwalk.jpg';
import Prins from '../images/prins.png';
import CatchControl from '../images/catchcontrol.webp';

import PortfolioItem from '../components/PortfolioItem.astro';
import Layout from '../layouts/Layout.astro';
import { Image } from 'astro:assets';
import TimelineItem from '@/components/TimelineItem.astro';
---

<script>
	import { queryAll, queryOne } from '../utils/generalUtils';
	import { gsap } from 'gsap';
	import { SplitText } from 'gsap/dist/SplitText';
	import ScrollTrigger from 'gsap/dist/ScrollTrigger';
	import { ScrollSmoother } from 'gsap/ScrollSmoother';
	import { createMouseListener } from '../utils/mouseMove';
	import { Observer } from 'gsap/Observer';
	import ScrambleTextPlugin from 'gsap/ScrambleTextPlugin';
	import { RoughEase } from 'gsap/EasePack';
	import CustomEase from 'gsap/CustomEase';
	import { scroller } from '@/utils/scroller';
	import { clamp } from 'three/src/math/MathUtils.js';

	gsap.registerPlugin(SplitText, ScrollTrigger, ScrollSmoother, Observer, ScrambleTextPlugin, RoughEase, CustomEase);

	gsap.from('.home-title h1', { duration: 2, delay: 1.2, ease: 'power4.out', scale: 0.2 });
	gsap.from('.home-title h1', { duration: 2, delay: 1.2, opacity: 0 });

	const timelineItems = queryAll('.scroll-timeline .item');
	const timelineSize = (timelineItems.length + 4) * window.innerHeight;

	export const tl = gsap.timeline({
		scrollTrigger: { start: 0, end: timelineSize, scrub: 2 },
		onUpdate: () => {
			scroller.update(tl.progress() * timelineSize);
			queryOne('.bottom-bar')!.style.transform = `translateX(${-scroller.top / 5}px)`;
		}
	});

	tl.addLabel('start');
	tl.to('.home-title', { duration: 1, translateZ: 600, pointerEvents: 'none', ease: 'linear' });
	tl.to('.canvas', { duration: 1, filter: 'blur(20px)', opacity: 0 }, '>+2');

	timelineItems.forEach((item, i) => {
		const itemTl = gsap.timeline({ paused: true });
		const pop = { duration: 1, ease: 'power4.out' };

		const img = item.querySelector('.image');
		if (img) itemTl.from(img, { ...pop, rotate: 10, scale: 0.2 }, '<');

		const { chars } = new SplitText(item.querySelectorAll('.animate-text'), { type: 'words, chars' });
		const roughEase = 'rough({strength: 5, points: 25, template: power3.inOut, taper: both, randomize: true})';
		itemTl.from(chars, { duration: 1, opacity: 0, stagger: 0.007, ease: roughEase }, '<');

		const info = item.querySelector('.info');
		if (info) itemTl.from(info, { ...pop, scale: 0.2 }, '<');

		const mouse = createMouseListener();

		const inner = item.querySelector('.inner') as HTMLElement;

		const listenToMouse = () => {
			mouse.kill();
			mouse.listen(({ clientX, clientY }) => {
				if (item.style.opacity == '0') return mouse.kill();
				const rotateX = (clientY - window.innerHeight / 2) / -40;
				const rotateY = (clientX - window.innerWidth / 2) / 40;
				gsap.to(inner, { duration: 0.5, rotateX, rotateY });
			});
		};
		const onStart = () => {
			itemTl.restart();
			listenToMouse();
		};

		const linear = { ease: 'linear', duration: 1 };

		tl.from(item, { duration: 0.001, pointerEvents: 'none' }, i == 0 ? '<' : '>');
		tl.from(item, { ...linear, duration: 0.5, opacity: 0 }, '<');
		tl.from(inner, { ...linear, translateZ: -600, onStart }, '<');
		tl.addLabel(`item-${i}`);
		if (i == timelineItems.length - 1) return;
		tl.to(inner, { ...linear, translateZ: 600 });
		tl.to(item, { ...linear, duration: 0.5, opacity: 0 }, '<+0.5');
		tl.to(item, { duration: 0.001, pointerEvents: 'none', onReverseComplete: listenToMouse });
	});
	tl.to('.canvas', { duration: 1, filter: 'blur(0px)', opacity: 0.6, ease: 'power1.inOut' }, '<');

	tl.to('.canvas', { duration: 3, opacity: 0.2, ease: 'power1.in' }, 'item-0');

	let snapPoints = [0];
	Object.values(tl.labels).forEach((time, i) => {
		const el = document.createElement('div');
		queryOne('.snaps')!.appendChild(el);
		const position = (time / tl.totalDuration()) * timelineSize;
		snapPoints.push(position);
		el.classList.add('snap');
		el.style.marginTop = `${position - snapPoints[i]}px`;
	});
	snapPoints.shift();
	console.log(snapPoints);

	const incrementSnapPos = (increment: number) => {
		const dists = snapPoints.map((pos) => Math.abs(pos - scroller.top));
		const current = dists.indexOf(Math.min(...dists));
		scroller.to(snapPoints[clamp(current + increment, 0, snapPoints.length - 1)]);
	};

	queryOne('.back')?.addEventListener('click', () => incrementSnapPos(-1));
	queryOne('.next')?.addEventListener('click', () => incrementSnapPos(1));

	let dragStartPos = window.scrollY;
	Observer.create({
		target: '.bottom-bar-wrapper',
		type: 'pointer, touch',
		tolerance: 0.0001,
		onDragStart: () => {
			document.body.classList.add('select-none');
			dragStartPos = window.scrollY;
		},
		onDragEnd: () => document.body.classList.remove('select-none'),
		onDrag: (e) => {
			if (!e.isDragging || !e.startX || !e.x) return;
			const target = dragStartPos - (e.x - e.startX) * 5;
			window.scrollBy(0, target - window.scrollY);
			queryOne('.bottom-bar')!.style.transform = `translateX(${target / -5}px)`;
		}
	});

	const html = queryOne('html')!;
	html.style.scrollBehavior = 'smooth';
	html.style.scrollSnapType = 'y mandatory';
</script>

<Layout title="Wytze Sligting">
	<div class="trigger"></div>
	<div class="snaps contents relative"></div>
	<div class="snap h-screen"></div>

	<style is:global lang="postcss">
		 .snap {
			@apply snap-start relative w-full min-h-[1px] mb-[-1px];  
		}
	</style>

	<style lang="postcss" is:global>
		.scroll-timeline {
			perspective: 1000px;
			transform-style: preserve-3d;
		}
	</style>

	<div class="fixed-content fixed overflow-hidden inset-0 p-1 flex gap-1 flex-col items-stretch justify-start z-30">
		<nav class="nav flex justify-between py-1 px-2 uppercase tracking-widest text-muted-foreground">
			<h2 class="font-light">Wytze Sligting</h2>
			<h2 class="font-light opacity-50">|||</h2>
			<!-- <div>
			<p>+ Home</p>
			<p>Projects</p>
			<p>About</p>
		</div> -->
			<h2 class="font-light">Creative developer</h2>
			<h2 class="font-light opacity-50">|||</h2>
			<h2 class="font-light">Contact me</h2>
		</nav>

		<div class="scroll-timeline flex-grow overflow-hidden rounded-md border bg-background">
			<div class="canvas absolute pointer-events-none inset-0">
				<WebglCanvas delay={500} />
			</div>

			<div class="home-title absolute inset-0 flex justify-center">
				<div class="absolute inset-0 bg-gradient-to-t from-black/25 via-transparent"></div>
				<h1 class="text-8xl uppercase h-full pb-4 flex flex-col justify-end">
					<!-- <div>I build ideas.</div>
					<div class="text-[0.5em]">One pixel at a time.</div> -->
				</h1>
			</div>
			<TimelineItem class="about">
				<div class="image overflow-hidden bg-background border rounded-md">
					<Image src={Me} alt="" class="w-32 mix-blend-screen" width={600} />
				</div>
				<br />
				<div class="animate-text text-center font-normal">
					<p>Hey! I'm Wytze.</p>
					<p>A freelance computer nerd</p>
					<p>with an eye for design. I love</p>
					<p>to make an idea come to life.</p>
				</div>
			</TimelineItem>

			<TimelineItem>
				<h1 class="work animate-text text-9xl uppercase grid grid-cols-2 text-center">
					<div>w</div>
					<div>o</div>
					<div>r</div>
					<div>k</div>
				</h1>
			</TimelineItem>
			<style>
				h1.work > div {
					margin: calc(-0.4 * var(--var-size));
				}
			</style>

			<PortfolioItem
				image={Luca}
				title="Snakken naar Tichelaar"
				description="A rebellious exhibition about ceramics"
				tags={['Graphic design', 'Exposition design', 'Curation']}
			/>
			<PortfolioItem
				image={Suiker}
				title="Nationaal Suikerbieten archief"
				description="An arhcive website about the history of Dutch sugar industry"
				tags={['Web app', 'Solid.js', 'Supabase', 'Mux video']}
			/>
			<PortfolioItem
				image={Podwalk}
				title="Podwalk"
				description="A historical GPS guided audiotour"
				tags={['Mobile app', 'Flutter', 'GPS', 'Narration & sound design']}
			/>
			<!-- <PortfolioItem
				image={Prins}
				title="Café de Prins"
				description="Revamping an iconic café and hotel"
				tags={['Interior design', 'Brand identity', 'Graphic design']}
			/> -->
			<PortfolioItem
				image={CatchControl}
				title="Catch Control"
				description="A monitoring app for nature enthousiasts"
				tags={['Mobile app', 'Flutter', 'Firebase', 'Hardware integration']}
			/>

			<TimelineItem>
				<div class="contact animate-text flex flex-col items-start">
					<h2 class="text-9xl uppercase translate-z-4">Let's<br />chat</h2>

					<div class="bg-background/50 rounded-md border backdrop-blur">
						<p class="text-foreground/65 p-2">
							Contact me for full time jobs, <br />
							freelance projects or just to <br />
							say hello :-)
						</p>
						<div class="border-t px-2 py-1">
							<a href="/" class="translate-z-3 block">hello@wytze.dev</a>
						</div>
					</div>
				</div>
			</TimelineItem>

			<!-- <img
				src="/noise.gif"
				alt=""
				class="absolute h-full w-full object-cover opacity-[0.03] mix-blend-luminosity pointer-events-none"
			/> -->
		</div>
		<div class="flex gap-1">
			<div class="back tl-control">Back</div>
			<div class="bottom-bar-wrapper relative w-full overflow-hidden select-none border bg-black">
				<div class="bottom-bar flex gap-1 items-end p-1 w-full h-full">
					{Array.from({ length: 1000 }).map(() => <div class="line" />)}
				</div>
				<style lang="postcss">
					.line {
						@apply h-3 border-r border-muted-foreground/50 shrink-0;
					}
					.line:nth-child(10n) {
						@apply h-full;
					}
				</style>
				<div class="absolute inset-0 bg-gradient-to-r from-background/60 via-transparent to-background/60"></div>
			</div>
			<div class="next tl-control">Next</div>
			<style lang="postcss">
				.tl-control {
					@apply p-1 rounded-sm border bg-black text-muted-foreground/60 cursor-pointer select-none;
				}
				.tl-control:hover {
					@apply bg-muted-foreground/15;
				}
			</style>
		</div>
	</div>
</Layout>
